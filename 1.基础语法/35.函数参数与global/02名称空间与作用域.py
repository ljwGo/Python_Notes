# 一：名称空间nanespaces：存放名字的地方，是对栈区的划分
# 有了名称空间之后，就可以在栈区中存放相同的名字，详细的，名称空间
# 分为三种
# 1.1 内置名称空间
'''
# >>> print()
# >>> input()
'''
# 存活周期：python解释器启动则产生，python解释器关闭则销毁

# 1.2 全局名称空间
# 存放的名字：只要不是函数定义的、也不是内置的，剩下的都是全局名称空间的名字
# 存活周期：python文件执行则产生，python文件结束则销毁

# 1.3 局部名称空间
# 存放的名字：在调用函数时，运行函数体代码时产生，函数体代码结束后则销毁

# 1。4 名称空间的加载顺序
# 内置名称空间>全局名称空间>局部名称空间

# 1.5 销毁顺序
# 内置名称空间<全局名称空间<局部名称空间

# 1.6 名称的查找优先级：当前所在的位置向上一层一层查找
# 内置名称空间
# 全局名称空间
# 局部名称空间

# 示范一：
# def func():
#     print(x)
# x = 1111
# func()

# 示范二：名称空间的"嵌套"关系是以函数定义阶段为准，与调用位置无关
# x = 1
# def func():
#     print(x)
#
# def foo():
#     x = 222
#     func()
#
# foo()

# 示范3：函数嵌套定义
# x = 333
# def f1():
#     x = 111
#     def f2():
#         print(x)
#     x = 222
#     f2()
# f1()

# 示范4：
# x = 111
# def func():
#     print(x)
#     x = 2222
# func()

# 二：作用域-》作用范围
# 全局作用域：内置名称空间、全局名称空间
# 1、全局存活
# 2、全局有效：被所有函数共享

# z = 123
#
# def foo():
#     x = 111
#     print(x,z)
#
# def bar():
#     y = 222
#     print(y,z)
#
# foo()
# bar()

# 局部作用域：局部名称空间的名字
# 1、临时存活
# 2、局部有效：
# def foo(x):
#     def f1():
#         def f2():
#             print(x)
# def poo():
#    print(x)

# LEGB loacl enclosing global built-in