# ### part1 : sql语句优化
'''
1 mysql 执行流程
客户端：
    发送连接请求，然后发送sql语句

服务端：
    连接层：提供和客户端链接的服务
        show processlist;查看所有登录到mysql的用户
    服务层：
        提供各种用户使用的接口(增删改查)
        提供sql优化器(mysql query optimizer)
        (发现sql语句执行效率非常慢，会经过优化器优化，然后把优化的结果进行执行)
    存储引擎：
        把得到的数据进行保存，
        innodb：支持事务处理，支持行锁，支持高并发
        myisam：支持表锁，不支持并发，

    把数据存储在文件或者内存当中

create table ceshi_table(id int primary key auto_increment,name varchar(255)) engine = myisam auto_increment = 2 charset = utf8

    文件和日志
        产生日志文件 binlog 二进制文件

sql卡顿的原因
    硬盘读写数据，io延迟高，sql语句性能低，索引失效，导致sql执行时间长
    编写过程：
        select .. from .. join on where .. group by .. having .. order by .. limit ..

    解析过程：
        from .. join on .. where group by having select distinct order by limit ..
'''

# 索引
'''
索引(index)
索引(index)的概念:
    是一种树状的数据结构，即(B数结构，分支节点>2)
    相当于字典的目录，功效是加快查询的速度；
    常用树:B树(balance-tree),二叉树，红黑树，hash数

    树节点：
        根节点（最顶级的节点）
        分支节点（父节点，子节点）
        叶子节点（最后存储数据的节点）
        树的高度（树的层级，理想是三层）
    
    [b+] : 在相邻的叶子节点上，加入了双向链表（指针），当前叶子节点不但保存当前值，还保存了下一个叶子节点的地址[小范围数据，查询速度快]
    [b*] : 在相邻的分支节点上，加入了双向链表（指针），当前分支节点不但保存当前值，还保存了了下一个分支节点的地址[在大范围里，找数据速度加快]

索引 通过二分法分层数据，减少搜索的次数
'''

'''
4 innodb 和 myisam 的索引结构
    聚集索引(聚簇索引)[innodb存储引擎的特点，myisam没有]
    如果有主键，自动以主键作为聚集索引列（字段）
    如果没有主键，选择唯一键
    都没有，自动生成隐藏聚集索引，该字段是6个字节，类型为长整形
    
    分支节点是存储下一层节点的最小值，用来划分范围，最求的矮胖的数据类型
    在数据量变大时，尽量在数层级高度不变的情况下，横向发展，好处：可以减少io次数，提升查询效率
    真实的数据，直接在叶子节点上存储，所以速度快
    
    辅助索引（非聚集索引，二级索引，普通索引）
    对一列数据先排序，划分区间，把索引值分布到叶子节点上
    辅助索引存储的是加了索引的字段值和对应映射到主键id，没有存储真实的数据
    通过找出这个主键，再去聚集索引树状状态中找到真实数据
    
    辅助索引辅助聚集索引找数据时，辅助索引叶子节点重复值过多，会导致回表的次数增多，随机产生的io减慢效率
    如果想要解决重复问题，使用联合索引，更加精确的找对应唯一的那个id
    
    两者区别:
    mysiam 和 innodb 使用的索引数据结构都是B+树，但是在叶子节点上存储的数据不同
    innodb的文件结构中只有.frm 和 .ibd ,直接把数据存在了叶子节点上
    mysiam的文件结构中只有.frm .myd 和 .myi 叶子节点上存储的索引列,通过索引映射对应的地址,再去通过这个地址找到实际的数据
    
    索引可以加快查询速度,速度很快,相反,增删改速度会变慢(原因是会改变树的结构)
    
'''

# ### part2 :
'''
1 常用索引
普通索引(index)
    提高查询的效率

唯一索引
    unique , primary key(主键)

联合索引:
    primary key() : 联合主键索引
    unique() : 联合唯一索引
    index() : 联合普通索引
    
'''

