# 一 形参于实参介绍
# 形参：在定义函数阶段定义的参数称之为形式参数，简称形参，相当于变量名
def func(x,y):
    print(x,y)

# 实参：在调用函数阶段传入的值称之为实际参数，简称实参，相当于变量值
func(1,2)

# 形参与实参的关系：
# 1、在调用阶段，实参（变量值）会绑定给形参（变量名）
# 2、这种绑定关系只能在函数体内使用
# 3、实参与形参的绑定关系在函数调用时生效，函数调用结束后解除绑定关系

# 实参相当于传入的值，值可以是一下形式
# 形式一：
# func(1,2)

# 形式二：
# a=1
# b=2
# func(a,b)

# 形式三：
# func(int('1'), 2)

# 二 形参与实参的具体使用
# 2.1 位置参数：按照从左到右的顺序依次定义的参数称之为位置参数
# 位置形参：在函数定义时，按照从左到右的顺序直接定义的"变量名"
#       特点：必须被传值，多一个少一个也不行

def func(x,y):
    print(x,y)

# 位置实数：在函数调用时，按照从左到右的顺序一次传入的值
#       特点：按照顺序与形参一一对应
func(1,2)

# 2.2 关键字参数
# 关键字实参：在函数调用阶段，按照key=value的形式传入的值
#       特点：指名道姓给某个形式传值，可以完全不按照顺序传值
# def func(x,y):
#     print(x,y)

func(y=2,x=222)

# 混合使用，强调
# 1、位置实参必须放在关键字实参前
func(1,y=2)
# 2、不能为同一个形参重复传值
# func(2,y=9,x=5)

# 2.3 默认参数
# 默认形参：在定义函数阶段，就已经被赋值的形参，称之为默认参数
#       特点：在定义阶段就已经被赋值，意为着在调用阶段可以不用为其赋值
def func1(x,y=3):
    print(x,y)

func1(1)

# 位置形参与默认形参混用，强调：
# 1、位置形参必须在默认形参的左边
# def func(y=2,x):
#     pass
# 2、默认参数的值是在函数定义阶段被赋值的，
m = 2
def func(x,y=m):
    print(x,y)
m = 33333
func(1)

# n = [111,222]
# def func(x,y=n):
#     print(x,y)
# n.append(333)
# func(1)

# 3、虽然默认默认值可以被指定为任意数据类型，但是不推荐使用可变类型
# 函数的定义应该要能预知它的结果，函数的结果不应受到函数调用外，其它函数外代码的影响
# 当有需要传入列表的需求时
def func(x, y, z, l=None):
    if l is None:
        l = []
    l.append(x)
    l.append(z)
    l.append(y)

# 2.4 可变长度的参数（*与**的用法）
# 可变长度指的是在调用函数时，传入的值（实参）的个数不固定
# 而实参是用来为形参赋值的，所以对应着，针对溢出的实参必须有对应的形参来接收
# 2.4.1 可变长度的位置参数
# I：*用来接收溢出的位置实参,溢出的位置实参会被*保存成元组的格式
#       *后跟的可以是任意变量名，但是约定俗成应该是args
def func4(x,y,*z):
    print(x,y,z)
func4(1,2,3,4,5,6)
# * 也可以用在实参中,实参中带*，先*后的值被打散成位置实参
func4(*[11,22,33,44,])
# 形参与实参都带*
func4(*'hello')

# 2.4.2 可变长度的关键字参数
# II：**形参名：用来接受溢出的关键字实参，**会将溢出的关键字实参保存成字典格式
#       **后跟的可以是任意变量名，但是约定俗成应该是kwargs
def my_sum(*args):
    sum = 0
    for num in args:
        sum += num
    return sum

def func5(x,y,**kwargs):
    print(x,y,kwargs)
func5(2,y=3,z=3,u=222)

# II：**可以用在实参中（**后跟的只能是字典），实参中带**，先**后的值打散成关键字实参
def func5(x,y,z):
    print(x,y,z)

func5(**{'x':1,'y':2,'z':3})

# 混用*与**
# *args必须在**kwargs之前

def index(x,y):
    print(x,y)

def wrapper(*args,**kwargs):
    index(*args,**kwargs)

wrapper(1,y=2)