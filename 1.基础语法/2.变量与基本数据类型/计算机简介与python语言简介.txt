本周内容：
	day01：计算机基础知识详解
		1、cpu详解
			cpu的分类与指令集
			x86-64（*****）
				cpu具有向下兼容性
					64的cpu既能运行32位的程序也能运行64位的程序
					
			内核态与用户态（*****）
				代表cpu的两种工作状态
					1、内核态：运行的程序是操作系统，可以操作计算机硬件
					2、用户态：运行的程序是应用程序，不可以操作计算机硬件

				内核态与用户态的转换
					应用程序的运行必然涉及到计算机硬件的操作，那就必须有用户态切换到内核态下才能实现，所以计算机工作时在频繁的发生内核态与用户态的转化
			多线程与多核芯片
				2核4线程（假4核）：
					2核带有两个cpu，4线程指的是每个cpu都有两个线程
				4核8线程：
					4核带有四个cpu，8线程指的是每个cpu都有两个线程
		2、存储器
			RAM：内存
			ROM：“只读内存”
				存放计算机厂商写死的计算机上的一段核心程序=》 BIOS（base input output system 基础输入输出功能）
			CMOS：
				断电数据丢失，读取速度慢，耗电量极低。

			硬盘：
				机修硬盘：磁盘
					磁道：一圈数据，对应着一串二进制（1bit代表一个二进制位）
						8bit比特位=1Bytes字节
						1024Bytes=1KB
						1024KB=1MB
						1024MB=1GB
						1024GB=1TB
						1024TB=1PB

						200G=200*1000*1000B

					扇区：
						一个扇区通常为512Bytes
						站在硬盘的解读，一次性读写数据的最小单位为扇区

						操作系统一次性读写的单位是一个block块=》8扇区的大小=4096Bytes

					柱面

				固态硬盘
			IO延迟（*****）
				7200转/min

				平均寻道时间：机修手臂转到数据所在磁道需要花费的时间，受限于物理工艺水平，目前机修硬盘可以达到的是5ms
				
				平均延迟事件：转半圈需要4ms

				IO延迟=平均寻道时间+平均延迟时间

				优化程序运行效率的一个核心法则：能从内存取数据，就不用从硬盘取

			虚拟内存

			IO设备=设备的控制+设备本身

		3、总线

		4、操作系统的启动流程（*****）
			BIOS被写入到ROM设备中

			裸机：
				cpu：
				ROM：充当内存
				CMOS：充当硬盘

			计算机的启动流程
				1、计算机加电
				2、bios开始运行，检测硬件：cpu、内存、硬盘
				3、bios读取cmos存储器中的参数，选择启动设备
				4、从启动设备读取第一个扇区的内容（MBR主引导记录，前446为引导信息，后64为分区信息，最后两个为标志位）
				5、根据分区信息读入bootloader启动装载模块，启动操作系统（bootloader为bios通过cmos中的信息将操作系统加载到内存中）

			BIOS
				1、存有win10系统的光盘、u盘、移动硬盘：无密码
				2、本地硬盘上的win7系统：密码

			应用的启动流程（*****）
				1、双击exe快捷方式==》exe文件的绝对路径，就是在告诉操作系统
					说：我有一个应用程序要执行，应用程序的文件路径是（exe文件的绝对路径）

				2、操作系统会根据文件路径找到exe程序在硬盘的位置，控制其代码从硬盘加载到内存

				3、然后控制cpu从内存中读取刚刚读入内存的应用程序的代码执行，应用程序完成启动


	day02：python入门
		1、编程语言介绍
			分类：
				机器语言
				汇编语言
				高级语言（编译型、解释型）
					编译型： ----》Gcc编译器----》机器语言
					解释器： ----》解释器（解释一行执行一行）
			总结：
				#1、执行效率：机器语言>汇编语言>高级语言（编译型>解释型）
				#2、开发效率：机器语言<汇编语言<高级语言（编译型<解释型）
				#3、跨平台性：解释型具有极强的跨平台性

		2、python介绍
			python2与python3是不兼容的
			python2最新版本是2.7，以后不再更新；
				python官网：http://www.python.org
					python2下载Windows x86-64 MSI installer
					python3下载Windows x86-64 executable installer

				python解释器在linux下的安装（编译安装）
					tar xvf Python-3.8.1.tgz - C /tmp/
					cd /tmp/Python-3.8.1/
					./configure -- prefix=/usr/local/python38（新起文件名）
					make && make install

					linux设置环境变量
					vim /etc/profile （vim命令行方式编辑）
					在最后一行
					输入PATH=$PATH: /usr/local/python38:/usr/local/python27
					:wq

		3、解释器多版本共存

		4、运行python程序的两种方式
			1、交互式
				及时得到程序的运行结果，多用于调试
			2、脚本
				把程序写到文件里（约定俗成文件后缀为.py），然后用python解释器解释执行其中的内容

				python解释器 + python文件

		5、一个python程序的运行的三个步骤（******）
			python3.8 C:\a\b\c.py
			1、先启动python3.8解释器
			2、解释器会发送系统调用，把c.py的内容从硬盘读入内存，此时c.py中的内容全部为普通字符，没有任何意义
			3、解释器开始解释执行刚刚读入内存的c.py的代码，开始识别python语法

			对比文本编辑器运行的三个步骤
			1、先启动文本编辑器
			2、文本编辑器会发送系统调用，把c.py的内容从硬盘读入到内存
			3、文本编辑器会将刚刚读入内存的内容控制到屏幕中

		总结：
			二者在前面两个阶段做的事情完全一致
			唯一不同的是第三个阶段对读入内存的python代码的处理方式不同


		6、注释
			对关键代码写注释

		7、IDE集成开发环境

	day03：变量与基本数据类型（全为重点）
		1、变量
			变量的基本使用
			变量的三大组成部分
			变量的命名规范
			变量名命名风格
				id
				type
				值

			is与==
			小整数值（了解）

			垃圾回收机制之引用计数

			常量

		2、基本数据类型
			数字类型：
				数字类型：int、float
				布尔类型：True、False
				复数：complex
			字符串类型：str
			列表类型：list
			字典：dict
			集合：set

	day04：
		1、垃圾回收机制详解
			引用计数
			标记清除
			分代回收

		2、与用户交互
			接收用户输入
			格式化输出

		3、基本运算符：
			算数运算符
			位运算符
			比较运算符
			身份元素符
			成员运算符
			逻辑运算符
			赋值运算符

		4、控制流程之if判断
			if 条件：
				代码块
			elif 条件：
				代码块
			。。。
			else：
				代码块
	day05：
		1、控制流程之while循环
			while循环的基本使用
			死循环与效率问题
			while循环嵌套
			退出while循环的两种方式
				条件为False
				while+break

今日内容：
	人=======编程语言======》计算机
			去包子店
			付款
			把包子拿回来

	cpu指令集：
		1、精简指令集（稳定，功能较弱，完成一个任务需要多条指令集）
		2、复杂指令集（不稳定，功能较强）