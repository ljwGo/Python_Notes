# ### 位运算符: & 1 ~ ^ >> <<
var1 = 19 (二进制000000...10011)
var2 = 15 (二进制000000...01111)
res  = 3  (二进制000000...00011)

# & 按位与
"""
将 1 视为 True ; 将 0 视为 False
将两个数依次用逻辑与and处理得到True或False
"""
res = var1 & var2

1 按位或 (使用or处理)
res = var1 1 var2
"""
000000...10011
000000...01111
000000...11111
31
"""

# ^ 按位异或 (两个值不一样,返回真,否则返回假)
res = var1 ^ var2
'''
000000...10011
000000...01111
000000...11100
28
'''

# << 左移
res = 5 << 2 # 5 乘以 2的2次幂
res = 5 << 4 # 5 乘以 2的4次幂
"""
000...00101
000...10100
20
"""

# >> 右移
res = 5 >> 1 # 5 地板除 2的1次幂
res = 5 >> 2 # 5 地板除 2的2次幂
"""
000...101
000...010
2
"""

# ~ 按位非 (每一位取反,包括符号位) 结果:-(n + 1)
var = ~19
var = ~-19
var = ~20
"""
19
原码 000...10011
反码 000...10011
补码 000...10011

# 对补码进行按位非操作
000...10011
111...01100

给补码求原码
111...01100
100...10011+1
100...10100
-20
"""

"""
总结:
    所有运算符中 ** 的优先级最高
    所有运算符中 = 赋值运算符的优先级最低
    
    整体 一元运算符 > 二运运算符 优先级
    一元运算符: 同一时间,操作一个数字的 [-,~]
    二元运算符: 同一时间,操作两个数字的 [+,*,/]
    
    () > not > and > or
    乘除>加减
    (<<,>>) > & > ^ > 1
    
    算数运算符 位运算符 比较运算符 身份运算符 成员运算符 逻辑运算符
    赋值运算符 是 把等号右边的表达式计算完毕之后,在赋值给等号左侧;用来收尾的
    
    口诀  酸未必生成络
    
"""

#-1 负一,~12 按位非1

res = 5+5 << 6//3 is 40 and True
"""
10 << 2 is 40 and True
40 is 40 and True
True and True
"""






