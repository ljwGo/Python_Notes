# ### 命名关键字参数
"""
# 命名关键字参数 的两种形式
1 在参数的前面有一个*号 例: def func(a,b,*,c)
2 在普通收集参数 和 关键字收集参数 之间 例: def func(*args,c,**kwargs)

如果是命名关键字形参: 要求在调用时,必须使用关键字实参
"""
# 基本定义1
def func(a,b,*,c,d):
	print(a,b)
	print(c,d)

func(1,2,c=3,d=4)
# 基本定义2
def func(*args,c,**kwargs):
	print(args) # (1,2,3,4,6)
	print(kwargs) # {'a':'1','b':'2','d':'4'}
	print(c) # 3

func(1,2,3,4,6,a=1,b=2,c=3,d=4)

# * 和 ** 的魔术用法
# 在函数的调用处, * 和 ** 可以进行解包操作
def func(a,b,*,c,d):
	print(a,b)
	print(c,d)
#lst = [1,2]
#func(*lst,c=3,d=4) # func(1,2,c=3,d=4)
# 1 在列表或者元组前面加上一个*的用法
# 实现了将列表作为参数赋值的用法
# 2 在字典前面加上**的用法
#dic = {'c':'3','d':'4'}
#func(1,2,**dic) # func(1,2,c=3,d=4)
# 3 终极用法
lst = [1,2]
dic = {'c':'3','d':'4'}
func(*lst,**dic)

'''
* 和 ** 的用法
在定义处: *和** 是收集参数,*收集数据变成元组,**收集数据变成字典,是打包操作
在调用处: *和** 是捷豹操作,*一般加在列表或元组前,**一般加在字典前面
'''

"""
参数的顺序:
普通形参 > 默认形参 > 普通收集参数 > 命名关键字参数 > 关键字收集参数
用收集参数,可以收集所有种类的参数
"""

def f1(a,b,c=0,*args,**kw):
	print('a=',a,'b=',b,'c'=c,'args=',args,'ke=',kw)

def f2(a,b,c=0,*,d,**kw):
	print('a=', a, 'b=', b, 'c' = c,'d='d, 'ke=', kw)

# a=1 b=2 c=0 args=() ke={}
# a=1 b=2 c=3 args=() ke={}
# a=1 b=2 c=3 args=('a','b') ke={}
# a=1 b=2 c=3 args=('a','b') ke={'x':99}
# a=1 b=2 c=0 d=99 ke={'ext':None}

# 二
# a=1 b=2 c=3 args=4 kw={'d':99,'x':'#'}

# 三
# a=1 b=2 c=3 d=88 ke={'x':'#'}

# 四
# a=1 b=2 c=3 args=('a','b') ke={'x':99,'y':77}
# 67